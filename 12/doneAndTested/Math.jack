// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToJ;
	
    /** Initializes the library. */
    function void init() {
		var int j, res;
		let twoToJ = Array.new(16);
        let j=0;
        let res = 1;
        while (j < 16) {
            let twoToJ[j] = res;
            let res = res + res;
            let j = j + 1;
        }
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x<0) { 
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	
		var int sum, n, temp, j, shiftedX;
		let sum = 0;
        let shiftedX = x;
        let n = 16;
        let temp = 1;
        let j = 0;
	
        while (j < n) {
            if (~((twoToJ[j] & y) = 0)) {
                let sum = sum + shiftedX;
            }
            let j = j + 1;
            let shiftedX = shiftedX + shiftedX;
        }
		return sum;
	}

	/**
	*   helper function for the divide method.
	*/
	function int divideHelper(int x, int y) {
		var int q;
		if ((x < y) | (y < 0)){
			return 0;
		}
		let q = Math.divide(x,2*y);
		if ((x-(2*q*y))<y) {
		    return 2*q;
		}
		return 2*q+1;
	}
	
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int neg;
		let neg  = 1;
        if (x < 0) {
            let neg = -neg;
        }
        if (y < 0) {
            let neg = -neg;
        }

        return neg * Math.divideHelper(Math.abs(x), Math.abs(y));
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, square;
        let j = 7;
        let y = 0;

        while (~(j < 0)) {
            let square = (y + twoToJ[j]) * (y + twoToJ[j]);
            if ((~(square > x))&(square > 0)) {
                let y = y + twoToJ[j];
            }

            let j = j - 1;
        }
        return y;
    }
    

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a>b){
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a<b){
			return a;
		}
		return b;
    }
}
