// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2050;
        let freeList[-2] = 0;
        let freeList[-1] = 14333;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        if (~(address <0)){
            return ram[address];
        }
        return 0;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        //if (~(address < 0)){
            let ram[address] = value;
        //}
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array currBlock, prevBlock, newBlock;
        var boolean finished;
        let currBlock = freeList;
        let finished = false;

        while(~(finished)){
            if (~(currBlock[-1] < (size + 2))){
                if (currBlock[-1] = (size + 2)){
                    let prevBlock[-2] = currBlock[-2];
                    let currBlock[-2] = 0;
                    return currBlock;
                }
                let newBlock = (currBlock[-1] - size);
                let newBlock[-2] = 0;
                let newBlock[-1] = size;
                let currBlock[-1] = (currBlock[-1] - (size + 2));
                return newBlock;
            } else {
                let prevBlock = currBlock;
                let currBlock = currBlock[-2];
            }

            if ((currBlock[-2] = 0)){
                let finished = true;
            }
        }
        //while(~(currBlock[-2] = 0)){
        //    if (~(currBlock[-1] < (size + 2))){
        //        if (currBlock[-1] = (size + 2)){
        //            let prevBlock[-2] = currBlock[-2];
        //            let currBlock[-2] = 0;
        //            return currBlock;
        //        }
        //        let newBlock = (currBlock[-1] - size);
        //        let newBlock[-2] = 0;
        //        let newBlock[-1] = size;
        //        let currBlock[-1] = (currBlock[-1] - (size + 2));
        //        return newBlock;
        //    } else {
        //        let prevBlock = currBlock;
        //        let currBlock = currBlock[-2];
        //    }
        //}
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array currBlock;
        let currBlock = freeList;

        while(~(currBlock[-2] = 0)){
            let currBlock = currBlock[-2];
        }
        let currBlock[-2] = o;
        return;
    }
}
