/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu {
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
        ALU(x = x, y = y, zx = instruction[5], nx = instruction[4], zy = instruction[3],
			ny = instruction[2], f = instruction[1], no = instruction[0], out = ALUOut); // output of the ALU
		Mul(a = x, b = y, out = xMuly);
		
		Mux16(a = y, b = x, sel = instruction[4], out = toShift);
		ShiftLeft(in = toShift, out = SL);
		ShiftRight(in = toShift , out = SR);
		Mux16(a = SR, b = SL, sel = instruction[5], out = shiftRes); // Shifting result
		
		Mux16(a = shiftRes, b = ALUOut, sel = instruction[8], out = outTemp);
		Mux16(a = xMuly, b = outTemp, sel = instruction[7], out = fout, out = out,
		out[15] = ng, out[0..7] = out1, out[8..15] = out2); // choose the right resultvand define outputs for calculating zr
		
		Or8Way(in = out1, out = half1);
		Or8Way(in = out2, out = half2);
		Or(a = half1, b = half2, out = orOut);
		Not(in = orOut, out = zr);
}
